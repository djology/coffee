GraalVM是什么


    大部分脚本语言或有动态特效的语言都需要一个语言虚拟机运行，比如CPython，Lua，Java，Ruby，R，JS，PHP，Perl等
    但是这些语言的虚拟机水平，具体的实现，差距很大
    那么能不能用state of the art级别的虚拟机，来运行这些语言，让他们享受该虚拟机的一些工匠特性？

    首先，对于Java，Scala，Groovy这些本来就是JVM-based的语言，没有任何压力
    但对于CPython，R，Ruby，PHP乃至自己编写的新语言，一般做法是：
        首先解析源代码到AST，然后写一个AST解释器
        当语言设计者开始迭代，实现虚拟机，包括GC，运行时等，代码执行仍然是AST解释器
        继续迭代，将AST转换为字节码，使用字节码解释器
        当性能变得很重要，可以写JIT编译器，提升GC性能等（大部分语言都到不了这一步）

    现在是希望，在AST解释器节点性能足够好，就不用花费太多精力和财力做性能优化，这就是Truffle语言框架的动机

    基于Truffle框架，AST树在解释过程中可以根据type feedback变形


    GraalVM，以上的图中所有语言最终都是运行在JVM中，需要机器提前安装JDK环境，而JVM由于自身原因，
    启动速度比较慢，内存负载较高。能不能把程序直接打包成平台相关的可执行文件，且不依赖于JVM？

    答案是SubstrateVM