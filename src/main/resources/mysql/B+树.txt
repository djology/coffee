MySQL索引：B+树


    索引是什么？
        索引是帮助MySQL高效获取数据的数据结构，可以提高数据查询效率

    索引分类
        存储结构：B Tree，Hash索引，full-index全文索引，R-Tree
        应用层次：普通索引，唯一索引，复合索引
        数据的物理顺序与键值的逻辑顺序关系：聚集索引，非聚集索引

    索引的底层实现
        MySQL默认引擎InnoDB只显式支持B树索引，对于频繁访问的表，InnoDB会透明建立自适应hash索引，
        即在B树索引基础上建立hash索引，显著提高查找效率，对客户端是透明，不可控制的

        Hash索引
            基于哈希表实现，只有精确匹配索引所有列的查询才有效，对于每一行数据，存储引擎都会对所有的索引
            计算一个哈希值，并存储在索引中，同时在索引表中保存指向每个数据行的指针

        B-Tree索引（InnoDB采用B+树）
            B-Tree能加快数据的访问速度，因为引擎不再需要进行全表扫描来获取数据，数据分布在各个节点中

        B+Tree索引
            B-Tree的改进版本，数据存储在叶子节点上，并增加了顺序访问指针，每个叶子节点上都指向相邻的叶子
            节点的地址，相比B树来说，进行范围查找时只需要查找两个节点，进行遍历即可

    什么索引结构默认使用B Tree，而不是hash，二叉树，红黑树？
        hash：可以快速定位，但没有顺序，io复杂度高
        二叉树：树的高度不均匀，不能自平衡，查找速度与数据有关（树的高度），io代价高
        红黑树：树的高度随数据量增加而增加，io代价高

    为什么官方建议使用自增长主键作为索引？
        结合B+树的特点，自增主键是连续的，在插入过程中尽量减少页分裂，可以减少数据移动的频率
