服务器性能剖析

    最常碰到的性能相关的服务请求：
        如何确认服务器是否到了性能最佳的状态
        找出某条语句为什么执行不够快
        诊断被描述成“停顿”、“堆积”或者“卡死”的某些间歇性疑难故障

3.1 性能优化简介

    性能即响应时间，这是非常重要的原则，通过任务和时间而不是资源来测量性能

    如何优化？
    消耗更多资源反而可以加快查询的响应时间
    同样，如果是只是提升每秒查询量，那吞吐量的提升可以看作是性能优化的副产品
    如果目标是降低响应时间，那就需要理解为什么服务器执行查询需要这么多时间？其次引申到如何测量时间？

3.1.1 通过性能剖析进行优化

    性能剖析的一般两个步骤：测量所花费时间；对结果进行统计和排序，将重要的任务优先

    实际谈论两种类型的性能剖析：
        基于执行时间的分析，分析什么任务的执行时间最长
        基于等待的分析，判断任务在什么位置被阻塞时间最长

3.1.2 理解性能剖析

    需要的信息：
        值得优化的查询
            只占总响应时间比重很小的查询不值得优化
            优化成本大于收益时，应当停止优化
        异常情况
        未知的未知（丢失的时间）
        被隐藏的细节（幸存者偏差）

3.2 对应用程序进行性能剖析

    剖析应用程序一般比剖析数据库服务器容易，回报更多

3.3 剖析MySQL查询
3.3.1 剖析服务器负载

    捕获MySQL的查询到日志文件中
        在MySQL 5.1及更新的版本中，慢日志的功能被加强，可以通过设置long_query_time为0来捕获所有的查询，
        而且查询的响应时间单位已经可以做到微秒级

        慢查询日志是开销最低、精度最高的测试查询时间的工具，不需要担心慢查询伴随的io开销

        MySQL的通用日志在查询请求到服务器时进行记录，所以不包含响应时间和执行计划等重要信息

    分析查询日志