索引

1. 表的检索方式
    全表扫描
    根据索引检索（效率较高）

2. 什么情况考虑添加索引？
    数据量庞大
    该字段很少进行DML操作
    该字段经常出现where子句中

3. 注意，主键和unique约束的字段自动添加索引

4. 查看MySQL中SQL语句的执行计划
        explain select ename, sal from emp where sal = 5000;
        +----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+
         | id   | select_type | table  | partitions  | type  | possible_keys| key   | key_len | ref     | rows | filtered   | Extra          |
        +----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+
         |  1   | SIMPLE       | emp   | NULL         | ALL   | NULL             | NULL| NULL     | NULL |   13   |    10.00   |Using where|
        +----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+

    对薪资sal字段添加索引？
        create index emp_sal_index on emp(sal);

5. 操作索引
    创建索引对象
        create index 索引名称 on 表名(字段名);
    删除索引对象
        drop index 索引名称 on 表名;

6. 索引底层采用的数据结构，B+ Tree

7. 索引实现原理
    通过B+ Tree缩小扫描范围，底层索引进行排序分区，索引会携带数据在表中的“物理地址”，
    最终通过索引检索到数据之后，获取到关联的物理地址，通过物理地址定位到表中数据

8. 分类
    单一索引
    复合索引
    主键索引
    唯一索引

9. 索引失效
    模糊查询时，第一个通配符使用%